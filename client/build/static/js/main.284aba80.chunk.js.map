{"version":3,"sources":["components/RoundContainer.js","components/MessageContainer.js","components/ClicksMessageContainer.js","components/Button.js","App.js","serviceWorker.js","index.js"],"names":["RoundContainer","className","this","props","titleTop","titleMiddle","titleBottom","React","Component","defaultProps","title1","title2","title3","MessageContainer","message","ClicksMessageContainer","middleText","Button","onClick","eventHandler","disabled","text","App","setInitialPoints","a","fetch","response","json","body","status","Error","initialPoints","init","setState","totalPoints","savePointsLocally","localStorage","setItem","state","handleReplayClick","gameOver","handleClick","method","pointsAwarded","points","clicksToNext","clicks","newPointsWon","won","newTotalPoints","pointsWon","localPoints","getItem","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.284aba80.chunk.js","sourcesContent":["import React from 'react';\n\nclass RoundContainer extends React.Component {\n  render() {\n    return (\n    <div className='round'>\n      <div className='round-top-title'>{this.props.titleTop}</div>\n      <div className='round-middle-title'>{this.props.titleMiddle}</div>\n      <div className='round-bottom-title'>{this.props.titleBottom}</div>\n    </div>\n    )\n  }\n}\n\nRoundContainer.defaultProps = {\n  title1: '',\n  title2: '',\n  title3: ''\n}\n\nexport default RoundContainer;\n","import React from 'react';\n\nclass MessageContainer extends React.Component {\n  render() {\n    return (\n      <div className={this.props.className}>\n        {this.props.message}\n      </div>\n    )\n  }\n}\n\nMessageContainer.defaultProps = {\n  className: 'result-message-container',\n  message: '',\n}\n\nexport default MessageContainer;","import React from 'react';\n\nclass ClicksMessageContainer extends React.Component {\n  render() {\n    return (\n    <div className={this.props.className}>\n      Vinkki HR:ltä:<br />\n      seuraava haastattelukutsu vain\n      <div>\n        {this.props.middleText}\n      </div>\n      hakemuksen päässä!\n    </div>\n    )\n  }\n}\n\nClicksMessageContainer.defaultProps = {\n  className: '',\n  middleText: '',\n}\n\nexport default ClicksMessageContainer;","import React from 'react';\n\nclass Button extends React.Component {\n  render() {\n    return (\n      <button \n        className={this.props.className} \n        onClick={this.props.eventHandler}\n        disabled={this.props.disabled}\n      >\n        {this.props.text}\n      </button>\n    )\n  }\n}\n\nButton.defaultProps = {\n  className: '',\n  text: 'Click',\n  disabled: false,\n}\n\nexport default Button;","import React, { Component } from \"react\";\n\nimport RoundContainer from './components/RoundContainer';\nimport MessageContainer from './components/MessageContainer';\nimport ClicksMessageContainer from './components/ClicksMessageContainer';\nimport Button from './components/Button';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      totalPoints: 0,\n      pointsWon: '',\n      gameOver: false,\n      message: 'Työpaikkajahti alkaa!',\n      clicks: 'muutaman'\n    }\n  }\n\n  // ********* points initial setting and saving ***********\n\n  componentDidMount() {\n    // initialise points\n    const localPoints = localStorage.getItem('points')\n    if (localPoints !== null && localPoints > 0) {\n      this.setState({ \n        totalPoints: localPoints * 1, // makes the value a number\n        gameOver: false \n      })\n    } else {\n      this.setInitialPoints()\n    }\n  }\n\n  // gets initial points from server\n  setInitialPoints = async () => {\n    const url = '/initvalue'\n    const response = await fetch(url)\n    const body = await response.json()\n    if (response.status !== 200) {\n      throw Error(body.message)\n    }\n    const initialPoints = body.init\n    this.setState({ totalPoints: initialPoints })\n  }\n\n  savePointsLocally = () => {\n    localStorage.setItem('points', this.state.totalPoints)\n  }\n\n  // ********** click event handlers *************\n\n  handleReplayClick = async () => {\n    this.setInitialPoints()\n    this.setState({ \n      gameOver: false,\n      message: '' \n    })\n  }\n\n  handleClick = async () => {\n    // get play result from backend\n    const url = '/play'\n    const response = await fetch(url, {\n      method: 'PUT'\n    })\n    const body = await response.json()\n    if (response.status !== 200) {\n      throw Error(body.message)\n    }\n    \n    // update points, clicks and messages\n    const pointsAwarded = body.points\n    const clicksToNext = body.clicks\n    const newPointsWon = body.won\n    const newTotalPoints = this.state.totalPoints + pointsAwarded\n    this.setState({ \n      totalPoints: newTotalPoints,\n      clicks: clicksToNext,\n      pointsWon: '+' + newPointsWon,\n      message : (newPointsWon === 0) ? 'Tällä kertaa valintamme ei kohdistunut sinuun.' : 'Jee, kutsu haastatteluun! Sait lisää puhtia.'\n     })\n     \n    this.savePointsLocally()\n\n    // check if game is over, update message and gameOver status\n    if (this.state.totalPoints <= 0) {\n      this.setState({ \n        gameOver: true,\n        message: 'Puhti loppu. Peli päättyi.'\n      })  \n    }\n  }\n\n  render() {\n    return (\n    <div className='main-container'>\n\n      <div className='top-bar'></div>\n      \n      <RoundContainer \n        titleTop='puhti'\n        titleMiddle={this.state.totalPoints}\n        titleBottom={this.state.pointsWon}\n      />\n      <MessageContainer\n        message={this.state.message}\n        className='result-message-container'\n      />\n\n      <ClicksMessageContainer\n        className='clicks-message-container'\n        middleText={this.state.clicks}\n      />\n\n      <div className='buttons-container'>\n        <Button \n          eventHandler={this.handleClick}\n          disabled={this.state.gameOver}\n          text='Lähetä hakemus'\n          className='play-button'\n        />\n        { this.state.gameOver ? <Button\n          eventHandler={this.handleReplayClick}\n          text='Aloita uusi peli'\n          className='replay-button'\n        /> : null}\n      </div>\n\n    </div> \n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'; // muutin tätä!!\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}