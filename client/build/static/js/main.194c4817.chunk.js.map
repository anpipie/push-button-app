{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","savePointsLocally","localStorage","setItem","state","totalPoints","showReplayButton","gameOver","onClick","handleReplayClick","setState","message","handleClick","a","fetch","method","response","json","body","status","Error","pointsAwarded","points","clicksToNext","clicks","newTotalPoints","localPoints","getItem","this","disabled","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"gPAwIeA,E,YA1Gb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAsBRC,kBAAoB,WAClBC,aAAaC,QAAQ,SAAU,EAAKC,MAAMC,cAxBzB,EA2BnBC,iBAAmB,WACjB,GAAI,EAAKF,MAAMG,SACb,OACE,4BAAQC,QAAU,EAAKC,mBAAvB,qBA9Ba,EAqCnBA,kBAAoB,WAClB,EAAKC,SAAS,CACZH,UAAU,EACVF,YAAa,GACbM,QAAS,MAzCM,EA6CnBC,YA7CmB,sBA6CL,oCAAAC,EAAA,4DAEA,QAFA,SAGWC,MADX,QACsB,CAChCC,OAAQ,QAJE,cAGNC,EAHM,gBAMOA,EAASC,OANhB,UAMNC,EANM,OAOY,MAApBF,EAASG,OAPD,sBAQJC,MAAMF,EAAKP,SARP,OAYNU,EAAgBH,EAAKI,OACrBC,EAAeL,EAAKM,OACpBC,EAAiB,EAAKrB,MAAMC,YAAcgB,EAAgB,EAEhE,EAAKX,SAAS,CACZL,YAAaoB,EACbD,OAAQD,EACRZ,QAA6B,IAAlBU,EAAuB,cAAxB,sBAAuDA,EAAvD,mBAGZ,EAAKpB,oBAGD,EAAKG,MAAMC,aAAe,GAC5B,EAAKK,SAAS,CACZH,UAAU,EACVI,QAAS,iBA5BD,4CA3CZ,EAAKP,MAAQ,CACXC,YAAa,GACbE,UAAU,EACVI,QAAS,GACTa,OAAQ,YANO,E,iFAYjB,IAAME,EAAcxB,aAAayB,QAAQ,UACrB,OAAhBD,GAAwBA,EAAc,EACxCE,KAAKlB,SAAS,CACZL,YAA2B,EAAdqB,EACbnB,UAAU,IAGZqB,KAAKlB,SAAS,CAAEL,YAAa,O,+BA4D/B,OACA,6BACE,2CACA,yCACYuB,KAAKxB,MAAMC,aAEvB,wDAC2BuB,KAAKxB,MAAMoB,OADtC,kCAGA,6BACE,4BACEhB,QAAWoB,KAAKhB,YAChBiB,SAAYD,KAAKxB,MAAMG,UAFzB,SAKCqB,KAAKxB,MAAMO,SAGd,6BACKiB,KAAKtB,yB,GApGEwB,aChBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMpC,c","file":"static/js/main.194c4817.chunk.js","sourcesContent":["/* import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App; */\nimport React, { Component } from \"react\";\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      totalPoints: 20,\n      gameOver: false,\n      message: '',\n      clicks: 'muutaman'\n    }\n  }\n\n  componentDidMount() {\n    // initialize points\n    const localPoints = localStorage.getItem('points')\n    if (localPoints !== null && localPoints > 0) {\n      this.setState({ \n        totalPoints: localPoints * 1, // makes the value a number\n        gameOver: false \n      })\n    } else {\n      this.setState({ totalPoints: 20 })\n    }\n  }\n\n  savePointsLocally = () => {\n    localStorage.setItem('points', this.state.totalPoints)\n  }\n\n  showReplayButton = () => {\n    if (this.state.gameOver) {\n      return (\n        <button onClick={ this.handleReplayClick }>\n          Aloita uusi peli\n        </button>\n      )\n    }\n  }\n\n  handleReplayClick = () => {\n    this.setState({ \n      gameOver: false,\n      totalPoints: 20,\n      message: '' \n    })\n  }\n\n  handleClick = async () => {\n    // get response from backend\n    const url = '/play'\n    const response = await fetch(url, {\n      method: 'PUT'\n    })\n    const body = await response.json()\n    if (response.status !== 200) {\n      throw Error(body.message)\n    }\n    \n    // update points, clicks and messages\n    const pointsAwarded = body.points\n    const clicksToNext = body.clicks\n    const newTotalPoints = this.state.totalPoints + pointsAwarded - 1 // add variable\n\n    this.setState({ \n      totalPoints: newTotalPoints,\n      clicks: clicksToNext,\n      message : (pointsAwarded === 0) ? 'Ei voittoa.' : `Jee, voitit ${pointsAwarded} pistett채!`\n     })\n     \n    this.savePointsLocally()\n\n    // check if game is over, update message and gameOver status\n    if (this.state.totalPoints <= 0) {\n      this.setState({ \n        gameOver: true,\n        message: 'Peli loppui!'\n      })  \n    }\n  }\n\n  render() {\n    return (\n    <div>\n      <h1>Painikepeli</h1>\n      <div> \n        Pisteet: {this.state.totalPoints}\n      </div>\n      <div>\n        Seuraava voitto on vain {this.state.clicks} painalluksen p채채ss채!\n      </div>\n      <div>\n        <button \n          onClick = {this.handleClick}\n          disabled = {this.state.gameOver}>\n            Pelaa\n        </button>\n        {this.state.message}\n      </div>\n\n      <div>\n          {this.showReplayButton()}\n      </div>\n\n    </div> \n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n/* import './index.css'; */\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}